# ~/.bash_prompt

# Colours used in the prompt
PROMPT_BLACK='\[\033[0;30m\]'
PROMPT_RED='\[\033[0;31m\]'
PROMPT_GREEN='\[\033[0;32m\]'
PROMPT_YELLOW='\[\033[0;33m\]'
PROMPT_BLUE='\[\033[0;34m\]'
PROMPT_MAGENTA='\[\033[0;35m\]'
PROMPT_CYAN='\[\033[0;36m\]'
PROMPT_WHITE='\[\033[0;37m\]'

PROMPT_BRIGHT_BLACK='\[\033[01;30m\]'
PROMPT_BRIGHT_RED='\[\033[01;31m\]'
PROMPT_BRIGHT_GREEN='\[\033[01;32m\]'
PROMPT_BRIGHT_YELLOW='\[\033[01;33m\]'
PROMPT_BRIGHT_BLUE='\[\033[01;34m\]'
PROMPT_BRIGHT_MAGENTA='\[\033[01;35m\]'
PROMPT_BRIGHT_CYAN='\[\033[01;36m\]'
PROMPT_BRIGHT_WHITE='\[\033[01;37m\]'

PROMPT_COLOUR_ONE=${PROMPT_BRIGHT_GREEN}
PROMPT_COLOUR_TWO=${PROMPT_BRIGHT_BLUE}
PROMPT_COLOUR_THREE=${PROMPT_BRIGHT_CYAN}
PROMPT_ERROR=${PROMPT_BRIGHT_RED}
PROMPT_CLEAR='\[\033[00m\]'

function my_prompt() {
    # Saves the exit status of the last command
    local EXIT="${?}"

    # Checks if a virtual environment is active, and if so, includes it in the prompt
    if [[ -n "${VIRTUAL_ENV}" ]]; then
        PS1="("$(basename "${VIRTUAL_ENV}")")\n"
    else
        PS1=""
    fi

    # Sets the prompt to include the username, hostname, and current working directory
    PS1+="${PROMPT_COLOUR_ONE}\u@\h ${PROMPT_COLOUR_TWO}\w "

    # If in a git repository, includes the current branch and status
    if gitstatus_query && [[ "${VCS_STATUS_RESULT}" == ok-sync ]]; then
        PS1+="${PROMPT_COLOUR_THREE}["
        if [[ -n "${VCS_STATUS_LOCAL_BRANCH}" ]]; then
            PS1+="${VCS_STATUS_LOCAL_BRANCH//\\/\\\\}" # escape backslash
        else
            PS1+=" @${VCS_STATUS_COMMIT//\\/\\\\}" # escape backslash
        fi

        if [[ -n "${VCS_STATUS_REMOTE_NAME}" ]]; then
            PS1+=" → ${VCS_STATUS_REMOTE_NAME}"
        fi
        ((VCS_STATUS_HAS_STAGED)) && PS1+=" S:${VCS_STATUS_NUM_STAGED}"
        ((VCS_STATUS_HAS_UNSTAGED)) && PS1+=" US:${VCS_STATUS_NUM_UNSTAGED}"
        ((VCS_STATUS_HAS_UNTRACKED)) && PS1+=" UT:${VCS_STATUS_NUM_UNTRACKED}"

        # ⇣42 if behind the remote.
        ((VCS_STATUS_COMMITS_BEHIND)) && PS1+=" ⇣:${VCS_STATUS_COMMITS_BEHIND}"
        # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.
        # (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && PS1+=" "
        ((VCS_STATUS_COMMITS_AHEAD)) && PS1+=" ⇡:${VCS_STATUS_COMMITS_AHEAD}"
        # ⇠42 if behind the push remote.
        ((VCS_STATUS_PUSH_COMMITS_BEHIND)) && PS1+=" ⇠:${VCS_STATUS_PUSH_COMMITS_BEHIND}"
        # (( VCS_STATUS_PUSH_COMMITS_AHEAD && !VCS_STATUS_PUSH_COMMITS_BEHIND )) && p+=" "
        # ⇢42 if ahead of the push remote; no leading space if also behind: ⇠42⇢42.
        ((VCS_STATUS_PUSH_COMMITS_AHEAD)) && PS1+=" ⇢:${VCS_STATUS_PUSH_COMMITS_AHEAD}"
        # *42 if have stashes.
        ((VCS_STATUS_STASHES)) && PS1+=" *${VCS_STATUS_STASHES}"
        # 'merge' if the repo is in an unusual state.
        [[ -n "$VCS_STATUS_ACTION" ]] && PS1+=" ${VCS_STATUS_ACTION}"
        # ~42 if have merge conflicts.
        ((VCS_STATUS_NUM_CONFLICTED)) && PS1+=" ~${VCS_STATUS_NUM_CONFLICTED}"

        if [[ "${VCS_STATUS_HAS_STAGED}" -eq 1 || "${VCS_STATUS_HAS_UNSTAGED}" -eq 1 ]]; then
            PS1+="${PROMPT_ERROR} x"
        else
            PS1+=" ✓"
        fi

        PS1+="${PROMPT_COLOUR_THREE}]"
    fi

    if [[ $EXIT -eq 0 ]]; then
        PS1+="\n${PROMPT_CLEAR}\$ "
    else
        PS1+="\n${PROMPT_ERROR}\$${PROMPT_CLEAR} "
    fi
}